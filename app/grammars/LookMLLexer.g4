lexer grammar LookMLLexer;

// Keywords in ascending order
ACCESS_FILTER: 'access_filter';
ACTION: 'action';
AGGREGATE_TABLE: 'aggregate_table';
ALIAS: 'alias';
ALPHA_SORT: 'alpha_sort';
ALLOWED_VALUES: 'allowed_values';
ALWAYS_FILTER: 'always_filter';
ALWAYS_JOIN: 'always_join';
ASC: 'asc';
ASSERT: 'assert';
BYPASS_SUGGEST_RESTRICTIONS: 'bypass_suggest_restrictions';
CANCEL_GROUPING_FIELDS: 'cancel_grouping_fields';
CAN_FILTER: 'can_filter';
CASE_SENSITIVE: 'case_sensitive';
COLON: ':';
COMMA: ',';
CONDITIONALLY_FILTER: 'conditionally_filter';
COLUMN: 'column';
CROSS: 'cross';
DATAGROUP_TRIGGER: 'datagroup_trigger';
DEFAULT: 'default';
DERIVED_TABLE: 'derived_table';
DESC: 'desc';
DESCRIPTION: 'description';
DIMENSION: 'dimension';
DIMENSION_GROUP: 'dimension_group';
DIMENSIONS: 'dimensions';
DOLLAR: '$';
DOT: '.';
DRILL_FIELDS: 'drill_fields';
EQ: '=';
EXPLORE: 'explore';
EXPLORE_SOURCE: 'explore_source';
EXPRESSION: 'expression';
EXTENDS: 'extends';
EXTENSION: 'extension';
FIELD: 'field';
FIELDS: 'fields';
FILTER: 'filter';
FILTERS: 'filters';
FINAL: 'final';
FOREIGN_KEY: 'foreign_key';
FORM_PARAM: 'form_param';
FORM_URL: 'form_url';
FROM: 'from';
FULL_OUTER: 'full_outer';
FULL_SUGESTIONS: 'full_suggestions';
FULL_RESTRICTIONS: 'full_restrictions';
GROUP_ITEM_LABEL: 'group_item_label';
GROUP_LABEL: 'group_label';
HIDDEN_: 'hidden';
ICON_URL: 'icon_url';
INCLUDE: 'include';
INNER: 'inner';
JOIN: 'join';
LABEL: 'label';
LABEL_FROM_PARAMETER: 'label_from_parameter';
LBRACE: '{';
LBRACKET: '[';
LEFT_OUTER: 'left_outer';
LINK: 'link';
LIMIT: 'limit';
LPAREN: '(';
MANY_TO_MANY: 'many_to_many';
MANY_TO_ONE: 'many_to_one';
MATERIALIZATION: 'materialization';
MEASURE: 'measure';
MEASURES: 'measures';
MODEL: 'model';
NAME: 'name';
NO: 'no';
ONE_TO_ONE: 'one_to_one';
ONE_TO_MANY: 'one_to_many';
OPTION: 'option';
ORDER_BY_FIELD: 'order_by_field';

OUTER_ONLY: 'outer_only';
PARAM: 'param';
PARAMETER: 'parameter';
PERSIST_FOR: 'persist_for';
PERSIST_WITH: 'persist_with';
PIVOTS: 'pivots';
PIPE: '|';
PRIMARY_KEY: 'primary_key';
QUERY: 'query';
RBRACE: '}';
RBRACKET: ']';
RELATIONSHIP: 'relationship';
REQUIRED: 'required';
REQUIRED_ACCESS_GRANTS: 'required_access_grants';
REQUIRED_JOINS: 'required_joins';
RPAREN: ')';

SEMI: ';';
SORTS: 'sorts';
STYLE: 'style';
SQL: 'sql';
SQL_ALWAYS_HAVING: 'sql_always_having';
SQL_ALWAYS_WHERE: 'sql_always_where';
SQL_ON: 'sql_on';
SQL_TABLE_NAME: 'sql_table_name';
SQL_WHERE: 'sql_where';
SUGGESTABLE: 'suggestable';
SUGGESTIONS: 'suggestions';
SUGGEST_DIMENSION: 'suggest_dimension';
SUGGEST_EXPLORE: 'suggest_explore';
SUGGEST_PERSIST_FOR: 'suggest_persist_for';
SYMMETRIC_AGGREGATES: 'symmetric_aggregates';
TAGS: 'tags';
TEST: 'test';
THEN: 'then';
TIMEFRAMES: 'timeframes';
TYPE: 'type';
UNLESS: 'unless';
URL: 'url';
USER_ATTRIBUTE: 'user_attribute';
USER_ATTRIBUTE_PARAM: 'user_attribute_param';
VALUE: 'value';
VALUE_FORMAT: 'value_format';
VIEW: 'view';
VIEW_LABEL: 'view_label';
VIEW_NAME: 'view_name';
YES: 'yes';

// Dynamic fields
COMMENT: '#' .*? '\r'? '\n' -> skip;
IDENTIFIER: [a-zA-Z_] [a-zA-Z_0-9-.]*; 
NUMBER: [0-9]+ ('.' [0-9]+)?;
QUOTED_STRING: '"' (~["\r\n\t])* '"';
WS: [ \t\r\n]+ -> skip;